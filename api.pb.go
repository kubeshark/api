// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.6.1
// source: proto/api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResolutionMechanism int32

const (
	ResolutionMechanism_RESOLUTION_MECHANISM_NONE         ResolutionMechanism = 0
	ResolutionMechanism_RESOLUTION_MECHANISM_IP           ResolutionMechanism = 1
	ResolutionMechanism_RESOLUTION_MECHANISM_IP_AND_PORT  ResolutionMechanism = 2
	ResolutionMechanism_RESOLUTION_MECHANISM_DNS          ResolutionMechanism = 3
	ResolutionMechanism_RESOLUTION_MECHANISM_HTTP_HEADER  ResolutionMechanism = 4
	ResolutionMechanism_RESOLUTION_MECHANISM_CGROUP_ID    ResolutionMechanism = 5
	ResolutionMechanism_RESOLUTION_MECHANISM_CONTAINER_ID ResolutionMechanism = 6
	ResolutionMechanism_RESOLUTION_MECHANISM_SYSCALL      ResolutionMechanism = 7
)

// Enum value maps for ResolutionMechanism.
var (
	ResolutionMechanism_name = map[int32]string{
		0: "RESOLUTION_MECHANISM_NONE",
		1: "RESOLUTION_MECHANISM_IP",
		2: "RESOLUTION_MECHANISM_IP_AND_PORT",
		3: "RESOLUTION_MECHANISM_DNS",
		4: "RESOLUTION_MECHANISM_HTTP_HEADER",
		5: "RESOLUTION_MECHANISM_CGROUP_ID",
		6: "RESOLUTION_MECHANISM_CONTAINER_ID",
		7: "RESOLUTION_MECHANISM_SYSCALL",
	}
	ResolutionMechanism_value = map[string]int32{
		"RESOLUTION_MECHANISM_NONE":         0,
		"RESOLUTION_MECHANISM_IP":           1,
		"RESOLUTION_MECHANISM_IP_AND_PORT":  2,
		"RESOLUTION_MECHANISM_DNS":          3,
		"RESOLUTION_MECHANISM_HTTP_HEADER":  4,
		"RESOLUTION_MECHANISM_CGROUP_ID":    5,
		"RESOLUTION_MECHANISM_CONTAINER_ID": 6,
		"RESOLUTION_MECHANISM_SYSCALL":      7,
	}
)

func (x ResolutionMechanism) Enum() *ResolutionMechanism {
	p := new(ResolutionMechanism)
	*p = x
	return p
}

func (x ResolutionMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolutionMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_api_proto_enumTypes[0].Descriptor()
}

func (ResolutionMechanism) Type() protoreflect.EnumType {
	return &file_proto_api_proto_enumTypes[0]
}

func (x ResolutionMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResolutionMechanism) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResolutionMechanism(num)
	return nil
}

// Deprecated: Use ResolutionMechanism.Descriptor instead.
func (ResolutionMechanism) EnumDescriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{0}
}

type ErrorType int32

const (
	ErrorType_DISSECTION_ERROR ErrorType = 0
	ErrorType_CONNECTION_ERROR ErrorType = 1
	ErrorType_TIMEOUT_ERROR    ErrorType = 2
)

// Enum value maps for ErrorType.
var (
	ErrorType_name = map[int32]string{
		0: "DISSECTION_ERROR",
		1: "CONNECTION_ERROR",
		2: "TIMEOUT_ERROR",
	}
	ErrorType_value = map[string]int32{
		"DISSECTION_ERROR": 0,
		"CONNECTION_ERROR": 1,
		"TIMEOUT_ERROR":    2,
	}
)

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}

func (x ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_api_proto_enumTypes[1].Descriptor()
}

func (ErrorType) Type() protoreflect.EnumType {
	return &file_proto_api_proto_enumTypes[1]
}

func (x ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ErrorType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ErrorType(num)
	return nil
}

// Deprecated: Use ErrorType.Descriptor instead.
func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{1}
}

type Protocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Version         *string  `protobuf:"bytes,2,req,name=version" json:"version,omitempty"`
	Abbr            *string  `protobuf:"bytes,3,req,name=abbr" json:"abbr,omitempty"`
	LongName        *string  `protobuf:"bytes,4,req,name=longName" json:"longName,omitempty"`
	Macro           *string  `protobuf:"bytes,5,req,name=macro" json:"macro,omitempty"`
	BackgroundColor *string  `protobuf:"bytes,6,req,name=backgroundColor" json:"backgroundColor,omitempty"`
	ForegroundColor *string  `protobuf:"bytes,7,req,name=foregroundColor" json:"foregroundColor,omitempty"`
	FontSize        *int32   `protobuf:"varint,8,req,name=fontSize" json:"fontSize,omitempty"`
	ReferenceLink   *string  `protobuf:"bytes,9,req,name=referenceLink" json:"referenceLink,omitempty"`
	Ports           []string `protobuf:"bytes,10,rep,name=ports" json:"ports,omitempty"`
	Layer4          *string  `protobuf:"bytes,11,opt,name=layer4" json:"layer4,omitempty"`
	Layer3          *string  `protobuf:"bytes,12,opt,name=layer3" json:"layer3,omitempty"`
	Priority        []int32  `protobuf:"varint,13,rep,name=priority" json:"priority,omitempty"`
}

func (x *Protocol) Reset() {
	*x = Protocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol) ProtoMessage() {}

func (x *Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol.ProtoReflect.Descriptor instead.
func (*Protocol) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{0}
}

func (x *Protocol) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Protocol) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *Protocol) GetAbbr() string {
	if x != nil && x.Abbr != nil {
		return *x.Abbr
	}
	return ""
}

func (x *Protocol) GetLongName() string {
	if x != nil && x.LongName != nil {
		return *x.LongName
	}
	return ""
}

func (x *Protocol) GetMacro() string {
	if x != nil && x.Macro != nil {
		return *x.Macro
	}
	return ""
}

func (x *Protocol) GetBackgroundColor() string {
	if x != nil && x.BackgroundColor != nil {
		return *x.BackgroundColor
	}
	return ""
}

func (x *Protocol) GetForegroundColor() string {
	if x != nil && x.ForegroundColor != nil {
		return *x.ForegroundColor
	}
	return ""
}

func (x *Protocol) GetFontSize() int32 {
	if x != nil && x.FontSize != nil {
		return *x.FontSize
	}
	return 0
}

func (x *Protocol) GetReferenceLink() string {
	if x != nil && x.ReferenceLink != nil {
		return *x.ReferenceLink
	}
	return ""
}

func (x *Protocol) GetPorts() []string {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Protocol) GetLayer4() string {
	if x != nil && x.Layer4 != nil {
		return *x.Layer4
	}
	return ""
}

func (x *Protocol) GetLayer3() string {
	if x != nil && x.Layer3 != nil {
		return *x.Layer3
	}
	return ""
}

func (x *Protocol) GetPriority() []int32 {
	if x != nil {
		return x.Priority
	}
	return nil
}

type Resolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip        *string `protobuf:"bytes,1,req,name=ip" json:"ip,omitempty"`
	Port      *string `protobuf:"bytes,2,req,name=port" json:"port,omitempty"`
	Name      *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Namespace *string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	// optional k8s.io.api.core.v1.Pod pod = 5;
	CgroupId            *uint64              `protobuf:"varint,8,opt,name=cgroupId" json:"cgroupId,omitempty"`
	ContainerId         *string              `protobuf:"bytes,9,opt,name=containerId" json:"containerId,omitempty"`
	SocketId            *uint64              `protobuf:"varint,10,opt,name=socketId" json:"socketId,omitempty"`
	ProcessId           *int64               `protobuf:"varint,11,opt,name=processId" json:"processId,omitempty"`
	ParentProcessId     *int64               `protobuf:"varint,12,opt,name=parentProcessId" json:"parentProcessId,omitempty"`
	HostProcessId       *int64               `protobuf:"varint,13,opt,name=hostProcessId" json:"hostProcessId,omitempty"`
	HostParentProcessId *int64               `protobuf:"varint,14,opt,name=hostParentProcessId" json:"hostParentProcessId,omitempty"`
	ProcessName         *string              `protobuf:"bytes,15,opt,name=processName" json:"processName,omitempty"`
	ResolutionMechanism *ResolutionMechanism `protobuf:"varint,16,req,name=resolutionMechanism,enum=api.ResolutionMechanism" json:"resolutionMechanism,omitempty"`
}

func (x *Resolution) Reset() {
	*x = Resolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resolution) ProtoMessage() {}

func (x *Resolution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resolution.ProtoReflect.Descriptor instead.
func (*Resolution) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{1}
}

func (x *Resolution) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *Resolution) GetPort() string {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return ""
}

func (x *Resolution) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Resolution) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *Resolution) GetCgroupId() uint64 {
	if x != nil && x.CgroupId != nil {
		return *x.CgroupId
	}
	return 0
}

func (x *Resolution) GetContainerId() string {
	if x != nil && x.ContainerId != nil {
		return *x.ContainerId
	}
	return ""
}

func (x *Resolution) GetSocketId() uint64 {
	if x != nil && x.SocketId != nil {
		return *x.SocketId
	}
	return 0
}

func (x *Resolution) GetProcessId() int64 {
	if x != nil && x.ProcessId != nil {
		return *x.ProcessId
	}
	return 0
}

func (x *Resolution) GetParentProcessId() int64 {
	if x != nil && x.ParentProcessId != nil {
		return *x.ParentProcessId
	}
	return 0
}

func (x *Resolution) GetHostProcessId() int64 {
	if x != nil && x.HostProcessId != nil {
		return *x.HostProcessId
	}
	return 0
}

func (x *Resolution) GetHostParentProcessId() int64 {
	if x != nil && x.HostParentProcessId != nil {
		return *x.HostParentProcessId
	}
	return 0
}

func (x *Resolution) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *Resolution) GetResolutionMechanism() ResolutionMechanism {
	if x != nil && x.ResolutionMechanism != nil {
		return *x.ResolutionMechanism
	}
	return ResolutionMechanism_RESOLUTION_MECHANISM_NONE
}

type ResolutionSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip        *string `protobuf:"bytes,1,req,name=ip" json:"ip,omitempty"`
	Port      *string `protobuf:"bytes,2,req,name=port" json:"port,omitempty"`
	Name      *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Namespace *string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	// optional k8s.io.api.core.v1.Pod pod = 5;
	CgroupId            *uint64              `protobuf:"varint,8,opt,name=cgroupId" json:"cgroupId,omitempty"`
	ContainerId         *string              `protobuf:"bytes,9,opt,name=containerId" json:"containerId,omitempty"`
	SocketId            *uint64              `protobuf:"varint,10,opt,name=socketId" json:"socketId,omitempty"`
	ProcessId           *int64               `protobuf:"varint,11,opt,name=processId" json:"processId,omitempty"`
	ParentProcessId     *int64               `protobuf:"varint,12,opt,name=parentProcessId" json:"parentProcessId,omitempty"`
	HostProcessId       *int64               `protobuf:"varint,13,opt,name=hostProcessId" json:"hostProcessId,omitempty"`
	HostParentProcessId *int64               `protobuf:"varint,14,opt,name=hostParentProcessId" json:"hostParentProcessId,omitempty"`
	ProcessName         *string              `protobuf:"bytes,15,opt,name=processName" json:"processName,omitempty"`
	ResolutionMechanism *ResolutionMechanism `protobuf:"varint,16,req,name=resolutionMechanism,enum=api.ResolutionMechanism" json:"resolutionMechanism,omitempty"`
}

func (x *ResolutionSummary) Reset() {
	*x = ResolutionSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionSummary) ProtoMessage() {}

func (x *ResolutionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionSummary.ProtoReflect.Descriptor instead.
func (*ResolutionSummary) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{2}
}

func (x *ResolutionSummary) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *ResolutionSummary) GetPort() string {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return ""
}

func (x *ResolutionSummary) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ResolutionSummary) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *ResolutionSummary) GetCgroupId() uint64 {
	if x != nil && x.CgroupId != nil {
		return *x.CgroupId
	}
	return 0
}

func (x *ResolutionSummary) GetContainerId() string {
	if x != nil && x.ContainerId != nil {
		return *x.ContainerId
	}
	return ""
}

func (x *ResolutionSummary) GetSocketId() uint64 {
	if x != nil && x.SocketId != nil {
		return *x.SocketId
	}
	return 0
}

func (x *ResolutionSummary) GetProcessId() int64 {
	if x != nil && x.ProcessId != nil {
		return *x.ProcessId
	}
	return 0
}

func (x *ResolutionSummary) GetParentProcessId() int64 {
	if x != nil && x.ParentProcessId != nil {
		return *x.ParentProcessId
	}
	return 0
}

func (x *ResolutionSummary) GetHostProcessId() int64 {
	if x != nil && x.HostProcessId != nil {
		return *x.HostProcessId
	}
	return 0
}

func (x *ResolutionSummary) GetHostParentProcessId() int64 {
	if x != nil && x.HostParentProcessId != nil {
		return *x.HostParentProcessId
	}
	return 0
}

func (x *ResolutionSummary) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *ResolutionSummary) GetResolutionMechanism() ResolutionMechanism {
	if x != nil && x.ResolutionMechanism != nil {
		return *x.ResolutionMechanism
	}
	return ResolutionMechanism_RESOLUTION_MECHANISM_NONE
}

type Vlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Dot1Q *bool   `protobuf:"varint,2,req,name=dot1q" json:"dot1q,omitempty"`
}

func (x *Vlan) Reset() {
	*x = Vlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vlan) ProtoMessage() {}

func (x *Vlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vlan.ProtoReflect.Descriptor instead.
func (*Vlan) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{3}
}

func (x *Vlan) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Vlan) GetDot1Q() bool {
	if x != nil && x.Dot1Q != nil {
		return *x.Dot1Q
	}
	return false
}

type Capture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backend *string `protobuf:"bytes,1,req,name=backend" json:"backend,omitempty"`
	Source  *string `protobuf:"bytes,2,req,name=source" json:"source,omitempty"`
	Vlan    *Vlan   `protobuf:"bytes,3,opt,name=vlan" json:"vlan,omitempty"`
}

func (x *Capture) Reset() {
	*x = Capture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capture) ProtoMessage() {}

func (x *Capture) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capture.ProtoReflect.Descriptor instead.
func (*Capture) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{4}
}

func (x *Capture) GetBackend() string {
	if x != nil && x.Backend != nil {
		return *x.Backend
	}
	return ""
}

func (x *Capture) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *Capture) GetVlan() *Vlan {
	if x != nil {
		return x.Vlan
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   *string `protobuf:"bytes,1,req,name=ip" json:"ip,omitempty"`
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{5}
}

func (x *Node) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *Node) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorType *ErrorType `protobuf:"varint,1,req,name=errorType,enum=api.ErrorType" json:"errorType,omitempty"`
	Message   *string    `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{6}
}

func (x *Error) GetErrorType() ErrorType {
	if x != nil && x.ErrorType != nil {
		return *x.ErrorType
	}
	return ErrorType_DISSECTION_ERROR
}

func (x *Error) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *string `protobuf:"bytes,1,req,name=source" json:"source,omitempty"`
	Type   *string `protobuf:"bytes,2,req,name=type" json:"type,omitempty"`
	Data   []byte  `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{7}
}

func (x *Event) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *Event) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Event) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value    []byte  `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	Selector *string `protobuf:"bytes,3,req,name=selector" json:"selector,omitempty"`
}

func (x *TableData) Reset() {
	*x = TableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableData) ProtoMessage() {}

func (x *TableData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableData.ProtoReflect.Descriptor instead.
func (*TableData) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{8}
}

func (x *TableData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TableData) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TableData) GetSelector() string {
	if x != nil && x.Selector != nil {
		return *x.Selector
	}
	return ""
}

type SectionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *string      `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	Title     *string      `protobuf:"bytes,2,req,name=title" json:"title,omitempty"`
	TableData []*TableData `protobuf:"bytes,3,rep,name=tableData" json:"tableData,omitempty"`
	Encoding  *string      `protobuf:"bytes,4,req,name=encoding" json:"encoding,omitempty"`
	MimeType  *string      `protobuf:"bytes,5,req,name=mimeType" json:"mimeType,omitempty"`
	Body      *string      `protobuf:"bytes,6,req,name=body" json:"body,omitempty"`
	Selector  *string      `protobuf:"bytes,7,req,name=selector" json:"selector,omitempty"`
}

func (x *SectionData) Reset() {
	*x = SectionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SectionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectionData) ProtoMessage() {}

func (x *SectionData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectionData.ProtoReflect.Descriptor instead.
func (*SectionData) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{9}
}

func (x *SectionData) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *SectionData) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SectionData) GetTableData() []*TableData {
	if x != nil {
		return x.TableData
	}
	return nil
}

func (x *SectionData) GetEncoding() string {
	if x != nil && x.Encoding != nil {
		return *x.Encoding
	}
	return ""
}

func (x *SectionData) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *SectionData) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *SectionData) GetSelector() string {
	if x != nil && x.Selector != nil {
		return *x.Selector
	}
	return ""
}

type BaseEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *string            `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stream       *string            `protobuf:"bytes,2,req,name=stream" json:"stream,omitempty"`
	Worker       *string            `protobuf:"bytes,3,req,name=worker" json:"worker,omitempty"`
	Protocol     *Protocol          `protobuf:"bytes,4,req,name=protocol" json:"protocol,omitempty"`
	Tls          *bool              `protobuf:"varint,5,req,name=tls" json:"tls,omitempty"`
	Summary      *string            `protobuf:"bytes,6,req,name=summary" json:"summary,omitempty"`
	SummaryQuery *string            `protobuf:"bytes,7,req,name=summaryQuery" json:"summaryQuery,omitempty"`
	Status       *int64             `protobuf:"varint,8,req,name=status" json:"status,omitempty"`
	StatusQuery  *string            `protobuf:"bytes,9,req,name=statusQuery" json:"statusQuery,omitempty"`
	Method       *string            `protobuf:"bytes,10,req,name=method" json:"method,omitempty"`
	MethodQuery  *string            `protobuf:"bytes,11,req,name=methodQuery" json:"methodQuery,omitempty"`
	Timestamp    *int64             `protobuf:"varint,12,req,name=timestamp" json:"timestamp,omitempty"`
	Source       *ResolutionSummary `protobuf:"bytes,13,opt,name=source" json:"source,omitempty"`
	Destination  *ResolutionSummary `protobuf:"bytes,14,opt,name=destination" json:"destination,omitempty"`
	Outgoing     *bool              `protobuf:"varint,15,req,name=outgoing" json:"outgoing,omitempty"`
	RequestSize  *int64             `protobuf:"varint,16,req,name=requestSize" json:"requestSize,omitempty"`
	ResponseSize *int64             `protobuf:"varint,17,req,name=responseSize" json:"responseSize,omitempty"`
	ElapsedTime  *int64             `protobuf:"varint,18,req,name=elapsedTime" json:"elapsedTime,omitempty"`
	Passed       *bool              `protobuf:"varint,19,opt,name=passed" json:"passed,omitempty"`
	Failed       *bool              `protobuf:"varint,20,opt,name=failed" json:"failed,omitempty"`
	Error        *Error             `protobuf:"bytes,21,opt,name=error" json:"error,omitempty"`
	Record       *string            `protobuf:"bytes,22,opt,name=record" json:"record,omitempty"`
	Event        *bool              `protobuf:"varint,23,opt,name=event" json:"event,omitempty"`
	Capture      *Capture           `protobuf:"bytes,24,req,name=capture" json:"capture,omitempty"`
	Checksums    []string           `protobuf:"bytes,25,rep,name=checksums" json:"checksums,omitempty"`
	Duplicate    *string            `protobuf:"bytes,26,req,name=duplicate" json:"duplicate,omitempty"`
	Size         *int64             `protobuf:"varint,27,req,name=size" json:"size,omitempty"`
}

func (x *BaseEntry) Reset() {
	*x = BaseEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseEntry) ProtoMessage() {}

func (x *BaseEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseEntry.ProtoReflect.Descriptor instead.
func (*BaseEntry) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{10}
}

func (x *BaseEntry) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BaseEntry) GetStream() string {
	if x != nil && x.Stream != nil {
		return *x.Stream
	}
	return ""
}

func (x *BaseEntry) GetWorker() string {
	if x != nil && x.Worker != nil {
		return *x.Worker
	}
	return ""
}

func (x *BaseEntry) GetProtocol() *Protocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *BaseEntry) GetTls() bool {
	if x != nil && x.Tls != nil {
		return *x.Tls
	}
	return false
}

func (x *BaseEntry) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *BaseEntry) GetSummaryQuery() string {
	if x != nil && x.SummaryQuery != nil {
		return *x.SummaryQuery
	}
	return ""
}

func (x *BaseEntry) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *BaseEntry) GetStatusQuery() string {
	if x != nil && x.StatusQuery != nil {
		return *x.StatusQuery
	}
	return ""
}

func (x *BaseEntry) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *BaseEntry) GetMethodQuery() string {
	if x != nil && x.MethodQuery != nil {
		return *x.MethodQuery
	}
	return ""
}

func (x *BaseEntry) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *BaseEntry) GetSource() *ResolutionSummary {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *BaseEntry) GetDestination() *ResolutionSummary {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *BaseEntry) GetOutgoing() bool {
	if x != nil && x.Outgoing != nil {
		return *x.Outgoing
	}
	return false
}

func (x *BaseEntry) GetRequestSize() int64 {
	if x != nil && x.RequestSize != nil {
		return *x.RequestSize
	}
	return 0
}

func (x *BaseEntry) GetResponseSize() int64 {
	if x != nil && x.ResponseSize != nil {
		return *x.ResponseSize
	}
	return 0
}

func (x *BaseEntry) GetElapsedTime() int64 {
	if x != nil && x.ElapsedTime != nil {
		return *x.ElapsedTime
	}
	return 0
}

func (x *BaseEntry) GetPassed() bool {
	if x != nil && x.Passed != nil {
		return *x.Passed
	}
	return false
}

func (x *BaseEntry) GetFailed() bool {
	if x != nil && x.Failed != nil {
		return *x.Failed
	}
	return false
}

func (x *BaseEntry) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BaseEntry) GetRecord() string {
	if x != nil && x.Record != nil {
		return *x.Record
	}
	return ""
}

func (x *BaseEntry) GetEvent() bool {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return false
}

func (x *BaseEntry) GetCapture() *Capture {
	if x != nil {
		return x.Capture
	}
	return nil
}

func (x *BaseEntry) GetChecksums() []string {
	if x != nil {
		return x.Checksums
	}
	return nil
}

func (x *BaseEntry) GetDuplicate() string {
	if x != nil && x.Duplicate != nil {
		return *x.Duplicate
	}
	return ""
}

func (x *BaseEntry) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

// {worker}/{stream}-{index} uniquely identifies an item
type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *string     `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Index        *int64      `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
	Stream       *string     `protobuf:"bytes,3,req,name=stream" json:"stream,omitempty"`
	Worker       *string     `protobuf:"bytes,4,req,name=worker" json:"worker,omitempty"`
	Node         *Node       `protobuf:"bytes,5,req,name=node" json:"node,omitempty"`
	Protocol     *Protocol   `protobuf:"bytes,6,req,name=protocol" json:"protocol,omitempty"`
	Tls          *bool       `protobuf:"varint,7,req,name=tls" json:"tls,omitempty"`
	Source       *Resolution `protobuf:"bytes,8,opt,name=source" json:"source,omitempty"`
	Destination  *Resolution `protobuf:"bytes,9,opt,name=destination" json:"destination,omitempty"`
	Outgoing     *bool       `protobuf:"varint,10,req,name=outgoing" json:"outgoing,omitempty"`
	Timestamp    *int64      `protobuf:"varint,11,req,name=timestamp" json:"timestamp,omitempty"`
	StartTime    *int64      `protobuf:"varint,12,req,name=startTime" json:"startTime,omitempty"`
	Request      []byte      `protobuf:"bytes,13,req,name=request" json:"request,omitempty"`
	Response     []byte      `protobuf:"bytes,14,req,name=response" json:"response,omitempty"`
	RequestRef   *string     `protobuf:"bytes,15,req,name=requestRef" json:"requestRef,omitempty"`
	ResponseRef  *string     `protobuf:"bytes,16,req,name=responseRef" json:"responseRef,omitempty"`
	RequestSize  *int64      `protobuf:"varint,17,req,name=requestSize" json:"requestSize,omitempty"`
	ResponseSize *int64      `protobuf:"varint,18,req,name=responseSize" json:"responseSize,omitempty"`
	ElapsedTime  *int64      `protobuf:"varint,19,req,name=elapsedTime" json:"elapsedTime,omitempty"`
	Passed       *bool       `protobuf:"varint,20,req,name=passed" json:"passed,omitempty"`
	Failed       *bool       `protobuf:"varint,21,req,name=failed" json:"failed,omitempty"`
	Error        *Error      `protobuf:"bytes,22,opt,name=error" json:"error,omitempty"`
	EntryFile    *string     `protobuf:"bytes,23,req,name=entryFile" json:"entryFile,omitempty"`
	Record       *string     `protobuf:"bytes,24,req,name=record" json:"record,omitempty"`
	Event        *Event      `protobuf:"bytes,25,req,name=event" json:"event,omitempty"`
	EventRef     *string     `protobuf:"bytes,26,req,name=eventRef" json:"eventRef,omitempty"`
	Base         *BaseEntry  `protobuf:"bytes,27,opt,name=base" json:"base,omitempty"`
	Capture      *Capture    `protobuf:"bytes,28,req,name=capture" json:"capture,omitempty"`
	Checksums    []string    `protobuf:"bytes,29,rep,name=checksums" json:"checksums,omitempty"`
	Duplicate    *string     `protobuf:"bytes,30,req,name=duplicate" json:"duplicate,omitempty"`
	Data         []byte      `protobuf:"bytes,31,opt,name=data" json:"data,omitempty"`
	DataRef      *string     `protobuf:"bytes,32,req,name=dataRef" json:"dataRef,omitempty"`
	Size         *int64      `protobuf:"varint,33,req,name=size" json:"size,omitempty"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{11}
}

func (x *Entry) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Entry) GetIndex() int64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Entry) GetStream() string {
	if x != nil && x.Stream != nil {
		return *x.Stream
	}
	return ""
}

func (x *Entry) GetWorker() string {
	if x != nil && x.Worker != nil {
		return *x.Worker
	}
	return ""
}

func (x *Entry) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *Entry) GetProtocol() *Protocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *Entry) GetTls() bool {
	if x != nil && x.Tls != nil {
		return *x.Tls
	}
	return false
}

func (x *Entry) GetSource() *Resolution {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Entry) GetDestination() *Resolution {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Entry) GetOutgoing() bool {
	if x != nil && x.Outgoing != nil {
		return *x.Outgoing
	}
	return false
}

func (x *Entry) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Entry) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *Entry) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Entry) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Entry) GetRequestRef() string {
	if x != nil && x.RequestRef != nil {
		return *x.RequestRef
	}
	return ""
}

func (x *Entry) GetResponseRef() string {
	if x != nil && x.ResponseRef != nil {
		return *x.ResponseRef
	}
	return ""
}

func (x *Entry) GetRequestSize() int64 {
	if x != nil && x.RequestSize != nil {
		return *x.RequestSize
	}
	return 0
}

func (x *Entry) GetResponseSize() int64 {
	if x != nil && x.ResponseSize != nil {
		return *x.ResponseSize
	}
	return 0
}

func (x *Entry) GetElapsedTime() int64 {
	if x != nil && x.ElapsedTime != nil {
		return *x.ElapsedTime
	}
	return 0
}

func (x *Entry) GetPassed() bool {
	if x != nil && x.Passed != nil {
		return *x.Passed
	}
	return false
}

func (x *Entry) GetFailed() bool {
	if x != nil && x.Failed != nil {
		return *x.Failed
	}
	return false
}

func (x *Entry) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Entry) GetEntryFile() string {
	if x != nil && x.EntryFile != nil {
		return *x.EntryFile
	}
	return ""
}

func (x *Entry) GetRecord() string {
	if x != nil && x.Record != nil {
		return *x.Record
	}
	return ""
}

func (x *Entry) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Entry) GetEventRef() string {
	if x != nil && x.EventRef != nil {
		return *x.EventRef
	}
	return ""
}

func (x *Entry) GetBase() *BaseEntry {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *Entry) GetCapture() *Capture {
	if x != nil {
		return x.Capture
	}
	return nil
}

func (x *Entry) GetChecksums() []string {
	if x != nil {
		return x.Checksums
	}
	return nil
}

func (x *Entry) GetDuplicate() string {
	if x != nil && x.Duplicate != nil {
		return *x.Duplicate
	}
	return ""
}

func (x *Entry) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Entry) GetDataRef() string {
	if x != nil && x.DataRef != nil {
		return *x.DataRef
	}
	return ""
}

func (x *Entry) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type Representation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request  []*SectionData `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
	Response []*SectionData `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
	Event    []*SectionData `protobuf:"bytes,3,rep,name=event" json:"event,omitempty"`
	Data     []*SectionData `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (x *Representation) Reset() {
	*x = Representation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Representation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Representation) ProtoMessage() {}

func (x *Representation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Representation.ProtoReflect.Descriptor instead.
func (*Representation) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{12}
}

func (x *Representation) GetRequest() []*SectionData {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Representation) GetResponse() []*SectionData {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Representation) GetEvent() []*SectionData {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Representation) GetData() []*SectionData {
	if x != nil {
		return x.Data
	}
	return nil
}

type EntryWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol       *Protocol       `protobuf:"bytes,1,req,name=protocol" json:"protocol,omitempty"`
	Representation *Representation `protobuf:"bytes,2,req,name=representation" json:"representation,omitempty"`
	Data           *Entry          `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
	Base           *BaseEntry      `protobuf:"bytes,4,req,name=base" json:"base,omitempty"`
}

func (x *EntryWrapper) Reset() {
	*x = EntryWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryWrapper) ProtoMessage() {}

func (x *EntryWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryWrapper.ProtoReflect.Descriptor instead.
func (*EntryWrapper) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{13}
}

func (x *EntryWrapper) GetProtocol() *Protocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *EntryWrapper) GetRepresentation() *Representation {
	if x != nil {
		return x.Representation
	}
	return nil
}

func (x *EntryWrapper) GetData() *Entry {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EntryWrapper) GetBase() *BaseEntry {
	if x != nil {
		return x.Base
	}
	return nil
}

var File_proto_api_proto protoreflect.FileDescriptor

var file_proto_api_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0xf6, 0x02, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x62, 0x62, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x62, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x66,
	0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x34, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x33, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22,
	0xca, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x10, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x22, 0xd1, 0x03, 0x0a,
	0x11, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x6f,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x68,
	0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x10, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x22, 0x2c, 0x0a, 0x04, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x74, 0x31,
	0x71, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x64, 0x6f, 0x74, 0x31, 0x71, 0x22, 0x5a,
	0x0a, 0x07, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x76,
	0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x56, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x22, 0x2a, 0x0a, 0x04, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x47, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x51, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0xbe, 0x06, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x0a, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x07,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x18, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x1a, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1b, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0xdd, 0x07, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52, 0x03, 0x74, 0x6c, 0x73,
	0x12, 0x27, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0d, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x66, 0x18, 0x10, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x12,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x18,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x18, 0x1a, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x1c, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x1e, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x18, 0x20, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x21, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xba, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x0e, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x2a, 0xa8, 0x02, 0x0a,
	0x13, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x49, 0x50, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x44,
	0x4e, 0x53, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45,
	0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49,
	0x53, 0x4d, 0x5f, 0x43, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x25,
	0x0a, 0x21, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43,
	0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53, 0x59,
	0x53, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x07, 0x2a, 0x4a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x53, 0x53, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x61, 0x70, 0x69,
}

var (
	file_proto_api_proto_rawDescOnce sync.Once
	file_proto_api_proto_rawDescData = file_proto_api_proto_rawDesc
)

func file_proto_api_proto_rawDescGZIP() []byte {
	file_proto_api_proto_rawDescOnce.Do(func() {
		file_proto_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_api_proto_rawDescData)
	})
	return file_proto_api_proto_rawDescData
}

var file_proto_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_api_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_api_proto_goTypes = []any{
	(ResolutionMechanism)(0),  // 0: api.ResolutionMechanism
	(ErrorType)(0),            // 1: api.ErrorType
	(*Protocol)(nil),          // 2: api.Protocol
	(*Resolution)(nil),        // 3: api.Resolution
	(*ResolutionSummary)(nil), // 4: api.ResolutionSummary
	(*Vlan)(nil),              // 5: api.Vlan
	(*Capture)(nil),           // 6: api.Capture
	(*Node)(nil),              // 7: api.Node
	(*Error)(nil),             // 8: api.Error
	(*Event)(nil),             // 9: api.Event
	(*TableData)(nil),         // 10: api.TableData
	(*SectionData)(nil),       // 11: api.SectionData
	(*BaseEntry)(nil),         // 12: api.BaseEntry
	(*Entry)(nil),             // 13: api.Entry
	(*Representation)(nil),    // 14: api.Representation
	(*EntryWrapper)(nil),      // 15: api.EntryWrapper
}
var file_proto_api_proto_depIdxs = []int32{
	0,  // 0: api.Resolution.resolutionMechanism:type_name -> api.ResolutionMechanism
	0,  // 1: api.ResolutionSummary.resolutionMechanism:type_name -> api.ResolutionMechanism
	5,  // 2: api.Capture.vlan:type_name -> api.Vlan
	1,  // 3: api.Error.errorType:type_name -> api.ErrorType
	10, // 4: api.SectionData.tableData:type_name -> api.TableData
	2,  // 5: api.BaseEntry.protocol:type_name -> api.Protocol
	4,  // 6: api.BaseEntry.source:type_name -> api.ResolutionSummary
	4,  // 7: api.BaseEntry.destination:type_name -> api.ResolutionSummary
	8,  // 8: api.BaseEntry.error:type_name -> api.Error
	6,  // 9: api.BaseEntry.capture:type_name -> api.Capture
	7,  // 10: api.Entry.node:type_name -> api.Node
	2,  // 11: api.Entry.protocol:type_name -> api.Protocol
	3,  // 12: api.Entry.source:type_name -> api.Resolution
	3,  // 13: api.Entry.destination:type_name -> api.Resolution
	8,  // 14: api.Entry.error:type_name -> api.Error
	9,  // 15: api.Entry.event:type_name -> api.Event
	12, // 16: api.Entry.base:type_name -> api.BaseEntry
	6,  // 17: api.Entry.capture:type_name -> api.Capture
	11, // 18: api.Representation.request:type_name -> api.SectionData
	11, // 19: api.Representation.response:type_name -> api.SectionData
	11, // 20: api.Representation.event:type_name -> api.SectionData
	11, // 21: api.Representation.data:type_name -> api.SectionData
	2,  // 22: api.EntryWrapper.protocol:type_name -> api.Protocol
	14, // 23: api.EntryWrapper.representation:type_name -> api.Representation
	13, // 24: api.EntryWrapper.data:type_name -> api.Entry
	12, // 25: api.EntryWrapper.base:type_name -> api.BaseEntry
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_proto_api_proto_init() }
func file_proto_api_proto_init() {
	if File_proto_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_api_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Protocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Resolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ResolutionSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Vlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Capture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SectionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*BaseEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Representation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*EntryWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_api_proto_goTypes,
		DependencyIndexes: file_proto_api_proto_depIdxs,
		EnumInfos:         file_proto_api_proto_enumTypes,
		MessageInfos:      file_proto_api_proto_msgTypes,
	}.Build()
	File_proto_api_proto = out.File
	file_proto_api_proto_rawDesc = nil
	file_proto_api_proto_goTypes = nil
	file_proto_api_proto_depIdxs = nil
}
